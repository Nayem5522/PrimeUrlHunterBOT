# in & as LazyDeveloper
# Please Don't Remove Credit

from configs import Config
from pyrogram import Client, filters, idle
from pyrogram.errors import QueryIdInvalid
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InlineQuery, InlineQueryResultArticle, InputTextMessageContent
from LazyDeveloper.forcesub import ForceSub
import asyncio

# Bot Client for Inline Search
Bot = Client(
    "PrimeBotz",  
    api_id=Config.API_ID,
    api_hash=Config.API_HASH,
    bot_token=Config.BOT_TOKEN
)

User = Client(
    "UserSession",  
    api_id=Config.API_ID,
    api_hash=Config.API_HASH,
    session_string=Config.USER_SESSION_STRING
)

# ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶ú (‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶§‡ßá)
verified_groups = {}

LOG_CHANNEL_ID = -1002196408894  # ‡¶≤‡¶ó ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶Ü‡¶á‡¶°‡¶ø
MAIN_DATABASE_CHANNEL = Config.CHANNEL_ID  # ‡¶Æ‡ßÇ‡¶≤ ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶ú ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤

@Bot.on_message(filters.private & filters.command("start"))
async def start_handler(_, event: Message):
	await event.reply_photo("https://telegra.ph/file/2b160d9765fe080c704d2.png",
                                caption=Config.START_MSG.format(event.from_user.mention),
                                reply_markup=InlineKeyboardMarkup([
                                    [InlineKeyboardButton("üî∫ Donate us üî∫", url="https://p.paytm.me/xCTH/vo37hii9")],
                                    [InlineKeyboardButton("‚ö°Ô∏è LazyDeveloper ‚ö°Ô∏è", url="https://t.me/LazyDeveloper")],
                                    [InlineKeyboardButton("ü§íHelp", callback_data="Help_msg"),
                                    InlineKeyboardButton("ü¶ãAbout", callback_data="About_msg")]]))

@Bot.on_message(filters.private & filters.command("help"))
async def help_handler(_, event: Message):

    await event.reply_text(Config.ABOUT_HELP_TEXT.format(event.from_user.mention),
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("Updates", url="https://t.me/LazyDeveloper"),
             InlineKeyboardButton("Support Group", url="https://t.me/LazyPrincessSupport"), 
             InlineKeyboardButton("About", callback_data="About_msg")]
        ])
    )

@Bot.on_message(filters.incoming & ~filters.channel)  # ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶¨‡ßç‡¶≤‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
async def inline_handlers(_, event: Message):
    if event.text == '/start':
        return
    
    answers = f'üìÇ Hunts For ‚û† {event.text} \n‚ü•‚ü•‚ü•‚ü•‚ü•‚ü•‚ü•‚ü•‚ü•‚ü•‚ü•‚ü•‚ü•‚ü§\nüîä\n‚û† Type Only Movie Name With Correct Spelling. Dont type Bhejo, Bhej Do, send me etc...‚úçÔ∏è\n‚û† Add Year For Better Result.üóìÔ∏è\n‚ü•‚ü•‚ü•‚ü•‚ü•‚ü•‚ü•‚ü•‚ü•‚ü•‚ü•‚ü•‚ü•‚ü§\n\n'
    
    async for message in User.search_messages(chat_id=Config.CHANNEL_ID, limit=50, query=event.text):
        if message.text:
            thumb = None
            f_text = message.text
            msg_text = message.text.html
            if "|||" in message.text:
                f_text = message.text.split("|||", 1)[0]
                msg_text = message.text.html.split("|||", 1)[0]
            answers += f'üéû Movie Title ‚û† ' + '' + f_text.split("\n", 1)[0] + '' + '\n\nüìú Download URLs ‚û† ' + '' + f_text.split("\n", 2)[-1] + ' \n\n‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±\nLink Will Auto Delete In 50Sec...‚è∞\n‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±\n\n'

    try:
        msg = await event.reply_text(answers)
        await asyncio.sleep(50)
        await event.delete()
        await msg.delete()
    except:
        print(f"[{Config.BOT_SESSION_NAME}] - Failed to Answer - {event.from_user.first_name}")
	    
@Bot.on_callback_query()
async def button(bot, cmd: CallbackQuery):
        cb_data = cmd.data
        if "About_msg" in cb_data:
            await cmd.message.edit(
			text=Config.ABOUT_BOT_TEXT,
			disable_web_page_preview=True,
			reply_markup=InlineKeyboardMarkup(
				[
					[
						InlineKeyboardButton("Updates Channel", url="https://t.me/LazyDeveloper")
					],
					[
						InlineKeyboardButton("Connect Admin", url="https://t.me/LazyDeveloper"),
						InlineKeyboardButton("üè†Home", callback_data="gohome")
					]
				]
			),
			parse_mode="html"
		)
        elif "Help_msg" in cb_data:
            await cmd.message.edit(
			text=Config.ABOUT_HELP_TEXT,
			disable_web_page_preview=True,
			reply_markup=InlineKeyboardMarkup(
				[
					[   InlineKeyboardButton("Help", callback_data="Help_msg"),
						InlineKeyboardButton("Updates Channel", url="https://t.me/LazyDeveloper")
					], 
                    [
						InlineKeyboardButton("Connect Admin", url="https://t.me/LazyDeveloper"),
						InlineKeyboardButton("üè†Home", callback_data="gohome")
					]
				]
			),
			parse_mode="html"
		)
        elif "gohome" in cb_data:
            await cmd.message.edit(
			text=Config.START_MSG.format(cmd.from_user.mention),
			disable_web_page_preview=True,
			reply_markup=InlineKeyboardMarkup(
				[
                    [
						InlineKeyboardButton("Help", callback_data="Help_msg"),
						InlineKeyboardButton("About", callback_data="About_msg")
					],
					[
						InlineKeyboardButton("Support Channel", url="https://t.me/LazyPrincessSupport"),
					]
				]
			),
			parse_mode="html"
		)

# üîπ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
@Bot.on_message(filters.group & filters.command("verify_primebotz"))
async def verify_group(bot, message: Message):
    chat = message.chat
    user = message.from_user
    
    member = await bot.get_chat_member(chat.id, user.id)
    if member.status not in ["administrator", "creator"]:
        return await message.reply_text("‚ùå **‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®!**")
    
    log_message = await bot.send_message(
        chat_id=LOG_CHANNEL_ID,
        text=f"**üîπ ‡¶®‡¶§‡ßÅ‡¶® ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü**\n\n"
             f"üë• **‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ:** {chat.title}\n"
             f"üÜî **‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶Ü‡¶á‡¶°‡¶ø:** `{chat.id}`\n"
             f"üë§ **‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®:** {user.mention}\n\n"
             f"‚úÖ ‡¶è‡¶ï‡¶∏‡ßá‡¶™‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ö‡¶æ‡¶™‡ßÅ‡¶®‡•§",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ Accept", callback_data=f"accept_{chat.id}")],
            [InlineKeyboardButton("‚ùå Cancel", callback_data=f"cancel_{chat.id}")]
        ])
    )

    await message.reply_text("‚úÖ **‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá! ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶®‡ßá‡¶∞ ‡¶™‡¶∞ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§**")

# üîπ ‡¶è‡¶ï‡¶∏‡ßá‡¶™‡ßç‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏‡ßá‡¶≤ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
@Bot.on_callback_query(filters.regex(r"^(accept|cancel)_(\-?\d+)$"))
async def verification_callback(bot, callback: CallbackQuery):
    action, group_id = callback.data.split("_")
    group_id = int(group_id)
    
    if action == "accept":
        verified_groups[group_id] = None  # ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á‡¶°, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶ï‡ßã‡¶® ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡¶®‡¶ø
        await bot.send_message(group_id, "‚úÖ **‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶è‡¶ï‡¶∏‡ßá‡¶™‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá! ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§**")
        await callback.message.edit_text("‚úÖ **‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡¶ü‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!**")
    else:
        await bot.send_message(group_id, "‚ùå **‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§**")
        await callback.message.edit_text("‚ùå **‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!**")

# üîπ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
@Bot.on_message(filters.group & filters.command("connect_prime"))
async def connect_channel(bot, message: Message):
    chat = message.chat
    user = message.from_user
    args = message.text.split()

    if len(args) < 2:
        return await message.reply_text("‚ùå **‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:** /connect_prime -1001234567890")

    channel_id = int(args[1])

    # ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á‡¶° ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶á ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá
    if chat.id not in verified_groups:
        return await message.reply_text("‚ùå **‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶è‡¶ñ‡¶®‡ßã ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡¶®‡¶ø!**")

    # ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ
    try:
        chat_member = await bot.get_chat_member(channel_id, "me")
        if not chat_member.can_post_messages:
            return await message.reply_text("‚ùå **‡¶Ü‡¶Æ‡¶ø ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶á! ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§**")
    except:
        return await message.reply_text("‚ùå **‡¶Ü‡¶Æ‡¶ø ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶á‡¶®‡¶ø! ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡ßá ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï‡•§**")

    verified_groups[chat.id] = channel_id
    await message.reply_text(f"‚úÖ **‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶è‡¶ñ‡¶® `{channel_id}` ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!**")

# üîπ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
@Bot.on_message(filters.group & filters.command("reset_prime"))
async def reset_group(bot, message: Message):
    chat = message.chat

    if chat.id in verified_groups:
        del verified_groups[chat.id]
        await message.reply_text("üîÑ **‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá! ‡¶è‡¶ñ‡¶® ‡¶Æ‡ßá‡¶á‡¶® ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶ú ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶π‡¶¨‡ßá‡•§**")
    else:
        await message.reply_text("‚ùå **‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡¶®‡¶ø!**")

# üîπ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ (‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶Ü‡¶®‡¶æ)
@Bot.on_message(filters.text & filters.group)
async def inline_handlers(bot, message: Message):
    chat = message.chat
    search_query = message.text

    if chat.id in verified_groups and verified_groups[chat.id]:
        channel_id = verified_groups[chat.id]  # ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤
    else:
        channel_id = MAIN_DATABASE_CHANNEL  # ‡¶Æ‡ßá‡¶á‡¶® ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶ú ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤

    results = []
    async for msg in User.search_messages(chat_id=channel_id, limit=50, query=search_query):
        if msg.text:
            results.append(msg.text)

    if results:
        response_text = "\n\n".join(results[:5])  # ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡ß´‡¶ü‡¶ø ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
        await message.reply_text(f"üîç **‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶´‡¶≤‡¶æ‡¶´‡¶≤:**\n\n{response_text}")
    else:
        await message.reply_text("‚ùå **‡¶ï‡ßã‡¶®‡ßã ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø!**")
	    

# Start Clients
Bot.start()
User.start()
# Loop Clients till Disconnects
idle()
# After Disconnects,
# Stop Clients
Bot.stop()
User.stop()
