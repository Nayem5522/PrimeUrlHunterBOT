# in & as LazyDeveloper
# Please Don't Remove Credit

from configs import Config
from pyrogram import Client, filters, idle
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import asyncio

# Bot Client for Inline Search
Bot = Client(
    "PrimeBotz",  
    api_id=Config.API_ID,
    api_hash=Config.API_HASH,
    bot_token=Config.BOT_TOKEN
)

User = Client(
    "UserSession",  
    api_id=Config.API_ID,
    api_hash=Config.API_HASH,
    session_string=Config.USER_SESSION_STRING
)

# ржбрж╛ржЯрж╛ржмрзЗржЬ (рж╕рзЗржЯрж┐ржВрж╕ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рждрзЗ)
verified_groups = {}

LOG_CHANNEL_ID = -1002196408894  # рж▓ржЧ ржЪрзНржпрж╛ржирзЗрж▓ ржЖржЗржбрж┐
MAIN_DATABASE_CHANNEL = Config.CHANNEL_ID  # ржорзВрж▓ ржбрж╛ржЯрж╛ржмрзЗржЬ ржЪрзНржпрж╛ржирзЗрж▓

@Bot.on_message(filters.private & filters.command("start"))
async def start_handler(_, message: Message):
    await message.reply_photo(
        "https://telegra.ph/file/2b160d9765fe080c704d2.png",
        caption=Config.START_MSG.format(message.from_user.mention),
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯФ║ Donate us ЁЯФ║", url="https://p.paytm.me/xCTH/vo37hii9")],
            [InlineKeyboardButton("тЪбя╕П LazyDeveloper тЪбя╕П", url="https://t.me/LazyDeveloper")],
            [InlineKeyboardButton("ЁЯдТ Help", callback_data="Help_msg"),
             InlineKeyboardButton("ЁЯжЛ About", callback_data="About_msg")]
        ])
    )

@Bot.on_message(filters.private & filters.command("help"))
async def help_handler(_, message: Message):
    await message.reply_text(
        Config.ABOUT_HELP_TEXT.format(message.from_user.mention),
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("Updates", url="https://t.me/LazyDeveloper"),
             InlineKeyboardButton("Support Group", url="https://t.me/LazyPrincessSupport"), 
             InlineKeyboardButton("About", callback_data="About_msg")]
        ])
    )

# ЁЯФ╣ ржЧрзНрж░рзБржк ржнрзЗрж░рж┐ржлрж┐ржХрзЗрж╢ржи ржХржорж╛ржирзНржб
@Bot.on_message(filters.group & filters.command("verify_primebotz"))
async def verify_group(bot, message: Message):
    chat = message.chat
    user = message.from_user
    
    member = await bot.get_chat_member(chat.id, user.id)
    if member.status not in ["administrator", "creator"]:
        return await message.reply_text("тЭМ **рж╢рзБржзрзБржорж╛рждрзНрж░ ржЧрзНрж░рзБржк ржПржбржорж┐ржи ржПржЗ ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи!**")
    
    log_message = await bot.send_message(
        chat_id=LOG_CHANNEL_ID,
        text=f"**ЁЯФ╣ ржирждрзБржи ржЧрзНрж░рзБржк ржнрзЗрж░рж┐ржлрж┐ржХрзЗрж╢ржи рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ**\n\n"
             f"ЁЯСе **ржЧрзНрж░рзБржкрзЗрж░ ржирж╛ржо:** {chat.title}\n"
             f"ЁЯЖФ **ржЧрзНрж░рзБржк ржЖржЗржбрж┐:** `{chat.id}`\n"
             f"ЁЯСд **рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ ржХрж░рзЗржЫрзЗржи:** {user.mention}\n\n"
             f"тЬЕ ржПржХрж╕рзЗржкрзНржЯ ржХрж░рждрзЗ ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржи ржЪрж╛ржкрзБржиред",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("тЬЕ Accept", callback_data=f"accept_{chat.id}")],
            [InlineKeyboardButton("тЭМ Cancel", callback_data=f"cancel_{chat.id}")]
        ])
    )

    await message.reply_text("тЬЕ **ржЖржкржирж╛рж░ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗ! ржЕрзНржпрж╛ржбржорж┐ржи ржЕржирзБржорзЛржжржирзЗрж░ ржкрж░ ржЖржкржирж┐ ржЪрзНржпрж╛ржирзЗрж▓ ржХрж╛ржирзЗржХрзНржЯ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред**")

# ЁЯФ╣ ржПржХрж╕рзЗржкрзНржЯ ржПржмржВ ржХрзНржпрж╛ржирзНрж╕рзЗрж▓ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
@Bot.on_callback_query(filters.regex(r"^(accept|cancel)_(\-?\d+)$"))
async def verification_callback(bot, callback: CallbackQuery):
    action, group_id = callback.data.split("_")
    group_id = int(group_id)
    
    if action == "accept":
        verified_groups[group_id] = None
        await bot.send_message(group_id, "тЬЕ **ржЖржкржирж╛рж░ ржЧрзНрж░рзБржк ржнрзЗрж░рж┐ржлрж┐ржХрзЗрж╢ржи ржПржХрж╕рзЗржкрзНржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ! ржПржЦржи ржЖржкржирж┐ ржЪрзНржпрж╛ржирзЗрж▓ ржХрж╛ржирзЗржХрзНржЯ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред**")
        await callback.message.edit_text("тЬЕ **ржЧрзНрж░рзБржкржЯрж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ ржнрзЗрж░рж┐ржлрж╛ржЗ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ!**")
    else:
        await bot.send_message(group_id, "тЭМ **ржЖржкржирж╛рж░ ржнрзЗрж░рж┐ржлрж┐ржХрзЗрж╢ржи рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред**")
        await callback.message.edit_text("тЭМ **ржнрзЗрж░рж┐ржлрж┐ржХрзЗрж╢ржи ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ!**")

# ЁЯФ╣ ржЪрзНржпрж╛ржирзЗрж▓ ржХрж╛ржирзЗржХрзНржЯ ржХржорж╛ржирзНржб
@Bot.on_message(filters.group & filters.command("connect_prime"))
async def connect_channel(bot, message: Message):
    chat = message.chat
    args = message.text.split()

    if len(args) < 2:
        return await message.reply_text("тЭМ **ржмрзНржпржмрж╣рж╛рж░:** /connect_prime -1001234567890")

    channel_id = int(args[1])

    if chat.id not in verified_groups:
        return await message.reply_text("тЭМ **ржЖржкржирж╛рж░ ржЧрзНрж░рзБржк ржПржЦржирзЛ ржнрзЗрж░рж┐ржлрж╛ржЗ ржХрж░рж╛ рж╣рзЯржирж┐!**")

    try:
        chat_member = await bot.get_chat_member(channel_id, "me")
        if not chat_member.can_post_messages:
            return await message.reply_text("тЭМ **ржЖржорж┐ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржПржбржорж┐ржи ржиржЗ! ржкрзНрж░ржержорзЗ ржЖржорж╛ржХрзЗ ржПржбржорж┐ржи ржХрж░рзБржиред**")
    except:
        return await message.reply_text("тЭМ **ржЖржорж┐ ржЪрзНржпрж╛ржирзЗрж▓ржЯрж┐ ржЦрзБржБржЬрзЗ ржкрж╛ржЗржирж┐! ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи ржпрзЗ ржЪрзНржпрж╛ржирзЗрж▓ ржЖржЗржбрж┐ рж╕ржарж┐ржХред**")

    verified_groups[chat.id] = channel_id
    await message.reply_text(f"тЬЕ **ржЖржкржирж╛рж░ ржЧрзНрж░рзБржк ржПржЦржи `{channel_id}` ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ рж╕рж╛ржерзЗ ржХрж╛ржирзЗржХрзНржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ!**")

# ЁЯФ╣ рж░рж┐рж╕рзЗржЯ ржХржорж╛ржирзНржб
@Bot.on_message(filters.group & filters.command("reset_prime"))
async def reset_group(bot, message: Message):
    chat = message.chat

    if chat.id in verified_groups:
        del verified_groups[chat.id]
        await message.reply_text("ЁЯФД **рж╕ржлрж▓ржнрж╛ржмрзЗ рж░рж┐рж╕рзЗржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ! ржПржЦржи ржорзЗржЗржи ржбрж╛ржЯрж╛ржмрзЗржЬ ржЪрзНржпрж╛ржирзЗрж▓ ржмрзНржпржмрж╣рж╛рж░ рж╣ржмрзЗред**")
    else:
        await message.reply_text("тЭМ **ржЖржкржирж╛рж░ ржЧрзНрж░рзБржк ржнрзЗрж░рж┐ржлрж╛ржЗ ржХрж░рж╛ рж╣рзЯржирж┐!**")

# ЁЯФ╣ ржлрж╛ржЗрж▓ рж╕рж╛рж░рзНржЪ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ (ржЪрзНржпрж╛ржирзЗрж▓ ржерзЗржХрзЗ рж▓рж┐ржВржХ ржЦрзБржБржЬрзЗ ржЖржирж╛)
@Bot.on_message(filters.text & filters.group)
async def search_handler(bot, message: Message):
    chat = message.chat
    search_query = message.text

    channel_id = verified_groups.get(chat.id, MAIN_DATABASE_CHANNEL)  # ЁЯФ╣ ржпржжрж┐ ржЧрзНрж░рзБржк ржнрзЗрж░рж┐ржлрж╛ржЗ ржирж╛ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ MAIN_DATABASE_CHANNEL ржмрзНржпржмрж╣рж╛рж░ рж╣ржмрзЗред

    results = []
    async for msg in User.search_messages(chat_id=channel_id, limit=10, query=search_query):
        if msg.text:
            results.append(msg.text)

    if results:
        response_text = "\n\n".join(results[:5])
        await message.reply_text(f"ЁЯФН **ржЖржкржирж╛рж░ ржЕржирзБрж╕ржирзНржзрж╛ржирзЗрж░ ржлрж▓рж╛ржлрж▓:**\n\n{response_text}")
    else:
        await message.reply_text("тЭМ **ржХрзЛржирзЛ ржлрж▓рж╛ржлрж▓ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐!**")
	    
# Start Clients
Bot.start()
User.start()
idle()
Bot.stop()
User.stop()
